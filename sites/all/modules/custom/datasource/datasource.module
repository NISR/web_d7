<?php

/*
 * Implements hook_block_info()
 */
function datasource_block_info(){
	$weight = 100;
	// Featured publications on homepage

	// Datasource types on datasource page
	$blocks['datasource_types'] = array(
		'info' => t('Datasource types'),
		'weight' => $weight,
		'cache' => DRUPAL_CACHE_GLOBAL,
		);
	/*	
	// Declare blocks from document subjects vocabulary
	$voc = taxonomy_vocabulary_machine_name_load('document_subjects');	
	$subjects = taxonomy_get_tree($voc->vid);
	
	foreach($subjects as $subject){
		$blocks[str_replace(' ','_',strtolower($subject->name))] =  array(
			'info' => t($subject->name) . ' documents',
			//'weight' => ++$weight, 
			'cache' => DRUPAL_CACHE_GLOBAL	
			);
	} 
	*/
	return $blocks;
}

/*
 * Implements hook_block_view()
 */
function datasource_block_view($delta = ''){
	module_load_include('inc','nisr','utils');

	if($delta == 'datasource_types'){
		$block['title'] = '';
		$block['content'] = get_taxonomy_terms('datasource_types','datasources');
	}
	/*
	// Feed the dynamically declared blocks from document subjects vocabulary with view embed display
	$voc = taxonomy_vocabulary_machine_name_load('document_subjects');	
	$subjects = taxonomy_get_tree($voc->vid);
	
	foreach($subjects as $subject){
		if($delta == str_replace(' ','_',strtolower($subject->name))){
			$view =  get_embed_view('publications_search','documents',array($subject->tid));			
			$block['title'] = '';
			$block['content'] = $view['result'];
		}
	} 	
	*/
	
	return $block;
}

/*
 * Implements hook_entities_by_term()
 */
function datasource_entities_by_term_alter(&$entities,$tid){
	module_load_include('inc','nisr','utils');
	$view = get_embed_view('datasources_search','metadata',array($tid));
	
	if($view['count']){
		$entities = array(
								'items' => array('#markup' => $view['result'],'#prefix' => "<div class='clearfix'>",'#suffix' => '</div>'),
							  );
	}	

}

/**
 * Implements hook_entity_info().
 */
function datasource_entity_info() {
  $return = array(
    'datasource' => array(
      'label' => t('Datasource'),
      'entity class' => 'DataSource',
      'controller class' => 'DataSourceController',
      'base table' => 'datasource',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'ds_id',
        'bundle' => 'type',
		  'uuid' => 'uuid',
      	),
      'bundle keys' => array(
        'bundle' => 'type',
      	),
      'bundles' => array(),
      'load hook' => 'datasource_load',
      'uuid' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        	),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => FALSE,
        	),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'datasource',
      'access callback' => 'datasource_access',
    ),
  );
  $return['datasource_type'] = array(
    'label' => t('Datasource type'),
    'entity class' => 'DataSourceType',
    'controller class' => 'DataSourceTypeController',
    'base table' => 'datasource_type',
    'fieldable' => FALSE,
    'bundle of' => 'datasource',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'datasource',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/datasource-types',
      'file' => 'datasource.admin.inc',
      'controller class' => 'DataSourceTypeUIController',
    ),
    'access callback' => 'datasource_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function datasource_entity_info_alter(&$entity_info) {
  foreach (datasource_types() as $type => $info) {
    $entity_info['datasource']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/datasource-types/manage/%datasource_type',
        'real path' => 'admin/structure/datasource-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function datasource_menu() {
  $items = array();

  $items['admin/content/datasources/add'] = array(
    'title' => 'Add datasource',
    'page callback' => 'datasource_admin_add_page',
    'access arguments' => array('administer datasource entities'),
    'file' => 'datasource.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'datasource',
    'tab_root' => 'datasource',
  );

  $datasource_uri = 'datasource/%datasource';
  $datasource_uri_argument_position = 1;

  $items[$datasource_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('datasource', $datasource_uri_argument_position),
    'page callback' => 'datasource_view',
    'page arguments' => array($datasource_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'datasource', $datasource_uri_argument_position),
    'file' => 'datasource.pages.inc',
  );

  $items[$datasource_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$datasource_uri . '/delete'] = array(
    'title' => 'Delete datasource',
    'title callback' => 'datasource_label',
    'title arguments' => array($datasource_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasource_delete_form', $datasource_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'datasource', $datasource_uri_argument_position),
    'file' => 'datasource.admin.inc',
  );

  $items[$datasource_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasource_form', $datasource_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'datasource', $datasource_uri_argument_position),
    'file' => 'datasource.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'theme callback' => 'variable_get',
    'theme arguments' => array('admin_theme'),
  );

  foreach (datasource_types() as $type => $info) {
    $items['datasource/add/' . $type] = array(
      'title' => 'Add datasource',
      'page callback' => 'datasource_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'datasource', $type),
      'file' => 'datasource.admin.inc',
    );
  }

  $items['admin/structure/datasource-types/%datasource_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasource_type_form_delete_confirm', 4),
    'access arguments' => array('administer datasource types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'datasource.admin.inc',
  );

	// 
	$items['datasources/%'] = array(
		'title callback' => 'get_taxonomy_term_label',
		'title arguments' => array(1),
    	'page callback' => 'term_page',
    	'page arguments' => array(1),
    	'access arguments' => array('access content'),
	);	
  	$items['datasources/%/view'] = array(
    	'title' => 'View',
    	'type' => MENU_DEFAULT_LOCAL_TASK,
  	);
	$items['datasources/%/edit'] = array(
		'title' => 'Edit',
    	'page callback' => 'term_goto',
    	'page arguments' => array(1),
    	'access arguments' => array('administer datasources entities'),
    	'type' => MENU_LOCAL_TASK,
		'weight' => 10,
	);	
  return $items;
}

/**
 * Implements hook_permission().
 */
function datasource_permission() {
  $permissions = array(
    'administer datasource types' => array(
      'title' => t('Administer datasource types'),
      'description' => t('Allows users to configure datasource types and their fields.'),
      'restrict access' => TRUE,
    ),
    'administer datasource entities' => array(
      'title' => t('Administer datasource entities'),
      'description' => t('Allows users to administer datasource entities.'),
      'restrict access' => TRUE,
    ),
    'create datasource entities' => array(
      'title' => t('Create datasources'),
      'description' => t('Allows users to create datasources.'),
      'restrict access' => FALSE,
    ),
    'view datasource entities' => array(
      'title' => t('View datasources'),
      'description' => t('Allows users to view datasources.'),
      'restrict access' => FALSE,
    ),
    'edit any datasource entities' => array(
      'title' => t('Edit any datasources'),
      'description' => t('Allows users to edit any datasources.'),
      'restrict access' => TRUE,
    ),
    'edit own datasource entities' => array(
      'title' => t('Edit own datasources'),
      'description' => t('Allows users to edit own datasources.'),
      'restrict access' => FALSE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function datasource_entity_property_info_alter(&$info) {
  $properties = &$info['datasource']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the datasource was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'create datasource entities',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the datasource."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer datasource entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/*
 * Implements hook_field_extra_fields()
 */
function datasource_field_extra_fields(){
	$extra = array();
	foreach (datasource_types() as $type => $info) {
		$extra['datasource'][$type] = array(
			'form' => array(
      		'title' => array(
        			'label' => t('Title'),
        			'description' => t('Datasource module element'),
        			'weight' => 0,
      		),
      	 ),
		);
  	}
  	return $extra;
}

/*
 * Implements hook_entity_view().
 */

function datasource_entity_view($entity, $type, $view_mode, $langcode){
  //unset($entity->content['author']);
	if($type == 'datasource'){
	  // Set breadrumb
	  $breadcrumb = array();
	  $breadcrumb[] = l(t('Home'),'</front>');
	  $breadcrumb[] = l(t('Data sources'),'datasources');
	  
	  if($entity->type == 'datasource_incidence'){
			$datasource = entity_metadata_wrapper('datasource',$entity);
			//$breadcrumb[] = l($datasource->field_datasource_entity->title->value(),'datasource/' . $datasource->field_datasource_entity->ds_id->value());
	  }
	  
	  $breadcrumb[] = drupal_get_title();
	  
	  drupal_set_breadcrumb($breadcrumb);
  }
}


/*
 * Implements hook_datasource_insert()
 */
 
function datasource_datasource_insert(DataSource $datasource){
	
}

/**
 * Implements hook_theme_registry_alter().
 */
function datasource_theme_registry_alter(&$theme_registry) {
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'datasource');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}



/*******************************************************************************
 ********************************* datasource API's **********************************
 ******************************************************************************/

/**
 * Access callback for datasource.
 */
function datasource_access($op, $datasource = NULL, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
  	 case 'administrer':
      return user_access('administer datasource entities', $account);
    case 'create':
      return user_access('administer datasource entities', $account)
          || user_access('create datasource entities', $account);
    case 'view':
      return user_access('administer datasource entities', $account)
          || user_access('view datasource entities', $account);
    case 'edit':
    case 'delete' :
    case 'update' :
      return user_access('administer datasource entities')
          || user_access('edit any datasource entities')
          || (user_access('edit own datasource entities') && ($datasource->uid == $account->uid));
  }
}

/**
 * Load a datasource.
 */
function datasource_load($ds_id, $reset = FALSE) {
  $datasources = datasource_load_multiple(array($ds_id), array(), $reset);
  return reset($datasources);
}

/**
 * Load multiple datasources based on certain conditions.
 */
function datasource_load_multiple($ds_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('datasource', $ds_ids, $conditions, $reset);
}

/**
 * Save datasource.
 */
function datasource_save($datasource) {
  entity_save('datasource', $datasource);
}

/**
 * Delete single datasource.
 */
function datasource_delete($datasource) {
  entity_delete('datasource', entity_id('datasource' ,$datasource));
}

/**
 * Delete multiple datasources.
 */
function datasource_delete_multiple($datasource_ids) {
  entity_delete_multiple('datasource', $datasource_ids);
}

/*******************************************************************************
 ****************************** datasource Type API's ********************************
 ******************************************************************************/

/**
 * Access callback for datasource Type.
 */
function datasource_type_access($op, $entity = NULL) {
  return user_access('administer datasource types');
}

/**
 * Load datasource Type.
 */
function datasource_type_load($datasource_type) {
  return datasource_types($datasource_type);
}

/**
 * List of datasource Types.
 */
function datasource_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('datasource_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save datasource type entity.
 */
function datasource_type_save($datasource_type) {
  entity_save('datasource_type', $datasource_type);
}

/**
 * Delete single case type.
 */
function datasource_type_delete($datasource_type) {
  entity_delete('datasource_type', entity_id('datasource_type' ,$datasource_type));
}

/**
 * Delete multiple case types.
 */
function datasource_type_delete_multiple($datasource_type_ids) {
  entity_delete_multiple('datasource_type', $datasource_type_ids);
}

/**
  * Implements hook_views_api().
  */
function datasource_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'datasource'),
  );
}
