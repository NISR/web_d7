<?php

/**
 * @file
 * Global configuration
 */
DEFINE('NISR_MODULE_PATH',drupal_get_path('module', 'nisr'));

drupal_add_css(NISR_MODULE_PATH. '/nisr.css', array('group' => CSS_THEME, 'weight' => '9999','every_page' => FALSE));

/*
 * Implements hook_block_info()
 */
function nisr_block_info(){
	$weight = 100;
	$blocks['featured_indicators_prognoz'] = array(
		'info' => t('Featured indicators from the Prognoz database'),
		'weight' => $weight,
		'cache' => DRUPAL_NO_CACHE,
		);
	$blocks['custom_search'] = array(
		'info' => t('Custom search box'),
		'weight' => -99,
		'cache' => DRUPAL_NO_CACHE,	
	);
					
	return $blocks;	
}

/*
 * Implements hook_block_view()
 */
function nisr_block_view($delta = ''){
	switch($delta){
		case 'featured_indicators_prognoz' :
			$url = '';
			$block['title'] = '';
			$block['content'] = _fetch_indicators($url);
			break;
		case 'custom_search':
			$block['title'] = '';
			$block['content'] = drupal_get_form('custom_search_form');
			break;
		default:
			break;
	}
	
	// Feed the dynamically declared blocks from document subjects vocabulary with view embed display
	$voc = taxonomy_vocabulary_machine_name_load('document_subjects');	
	$subjects = taxonomy_get_tree($voc->vid);
	
	foreach($subjects as $subject){
		if($delta == str_replace(' ','_',strtolower($subject->name))){
			module_load_include('inc','nisr','utils');
			$view =  get_embed_view('publications_search','documents',array($subject->tid));			
			$block['title'] = '';
			$block['content'] = $view['result'];
		}
	} 	
		
	return $block;
}

/**
 * Implementation of hook_context_load_alter()
 */
function nisr_context_load_alter(&$context) {

  if($context->name == 'search') {
    $context->reactions['block']['blocks']['nisr-custom_search']['weight'] = -99;
  }
  if($context->name == 'frontpage') {
    $context->reactions['block']['blocks']['block-ad_banner']['weight'] = -50;
  }
}

/**
 * Implements hook_menu().
 */
function nisr_menu(){
	$items = array();
	
	// Notices menu	
  	$items['admin/content/notices/add'] = array(
    'title' => t('Add notice'),
    'page callback' => 'node_add',
    'page arguments' => array('notice'),
    'access arguments' => array('administer content'),
    'file path' => drupal_get_path('module', 'node'), 
    'file' => 'node.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  	);
  	
  	// Profile menu items
	$items['login'] = array(
		'title' => 'Login',
    	'page callback' => 'drupal_goto',
    	'page arguments' => array('user/login'),
    	'access callback' => 'user_is_anonymous',
    	'weight' => -20,
    	'menu_name' => 'menu-profile-menu',
	);

	$items['register'] = array(
		'title' => 'Register',
    	'page callback' => 'drupal_goto',
    	'page arguments' => array('user/register'),
    	'access callback' => 'user_is_anonymous',
    	'weight' => -15,
    	'menu_name' => 'menu-profile-menu',
	);
		
	$items['profile'] = array(
		'title' => 'My profile',
    	'page callback' => '_profile_view',
    	'access callback' => 'user_is_logged_in',
    	'weight' => -20,
    	'menu_name' => 'menu-profile-menu',
	);
	
	$items['logout'] = array(
		'title' => 'Logout',
    	'page callback' => 'drupal_goto',
    	'page arguments' => array('user/logout'),
    	'access callback' => 'user_is_logged_in',
    	'weight' => -10,
    	'menu_name' => 'menu-profile-menu',
	);	
	// Terms page override
	$items['page/term/%'] = array(
		'title callback' => 'get_taxonomy_term_label',
		'title arguments' => array(2),
    	'page callback' => 'term_page',
    	'page arguments' => array(2),
    	'access arguments' => array('access content'),
	);	
	
	return $items;
}


/**
 * Implements hook_theme_registry_alter().
 */
function nisr_theme_registry_alter(&$theme_registry) {
    // Defined path to the current module.
    $theme_registry['file_formatter_table']['function'] = 'nisr_file_formatter_table';
    $module_path = drupal_get_path('module', 'nisr');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/theme/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
    
}

/**
 * Implements hook_user_login
 */
function nisr_user_login(&$edit, $account) {
	global $user;
	if(!profile2_load_by_user($user,'main')){
		$profile = profile2_create(array('type' => 'main','uid' => $user->uid));
		profile2_save($profile);
	}
}


function nisr_twitter_pull_blocks() {
  return array(
    0 => (object) array(
      'delta' => 'twitter_nisr_0',
      'tweetkey' => 'statisticsrw',
      'title' => 'Twitter',
      'name'  => 'NISR Tweet Feed',    
      'number_of_items' => 4,
      'theme_key' => 'twitter_pull_listing',    
    )
  );
  
}


/*
 * Theme function used to override the file table display to add the download count
 * alongside the file name/description 
 */
function nisr_file_formatter_table(&$variables){
  $header = array(t('File'), t('Download count'));
  $rows = array();
  foreach ($variables['items'] as $delta => $item) {
    $result = db_select('download_count','dc')->fields('dc')->condition('fid', $item['fid'], '=')->condition('uid', 1, '<>')->execute();
    $dc = $result->rowCount();   
    
    $rows[] = array(
      theme('file_link', array('file' => (object) $item)) . ' (' . format_size($item['filesize']) . ')',
      $dc,
    );
  }

  return empty($rows) ? '' : theme('table', array('header' => $header, 'rows' => $rows,'attributes' => array('class' => array('col-md-12'),'style'=>'margin-bottom:20px;')));
} 


/*
 * Submit xml request to Prognoz WebAPi service
 * @param
 *		$url : the service url with parameters
 *	@return
 *	String containing the html formatted data or error message
 * 
 */
function _fetch_indicators($url){
	$request = 'request';
	
	$response = 'response';
	
	return _set_block_content($response);
}


function custom_search_form($form,$form_state){
	$form = array();
	
	$form['wrapper']['search-icon'] = array(
		'#markup' => "<i class='fa fa-search'></i>",
	);
	
	$form['wrapper']['search'] = array(
		'#type' => 'textfield',
		'#size' => 10,
		'#name' => 'search',
		'#attributes' => array('class' => array('form-control','input-search')),
	); 
	$form['wrapper']['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Search'),
		'#attributes' => array('class' => array('btn-search')),
		'#prefix' => "<span class=''>",
		'#suffix' => '</span>',
	);
	
	return $form;	
}

function custom_search_form_validate($form,&$form_state){
	
}

function custom_search_form_submit($form,&$form_state){
	if(module_exists('google_cse')){
		drupal_goto('search/google/' . $form_state['input']['search']);
	}
}

/*
 * Get a entities associated to term 
 *  
 * @param
 *		$tid : the term id
 *
 *	@return
 *		array of entity items added by other modules
 */
function entities_by_term($tid){
	$entities = array();
	
	drupal_alter('entities_by_term',$entities,$tid);
	
	return $entities;
}

/*
 * Get children terms and/or various entities classified by a term
 *
 * @param
 *		$tid : term id
 *
 * @return
 *		renderable array
 *
 */
function term_page($tid){
	
	$term = taxonomy_term_load($tid);

	$content = array(
							'description' => array(
									'#markup' => $term->description,
									'#prefix' => "<div class='subject-description'>",
									'#suffix'=> '</div>',
							),	
				);
				
						
	$children_terms = taxonomy_get_children($tid);
	
	if(count($children_terms)){
		$content['wrapper'] = array("#prefix" => "<div class='featured-boxes'>");			
		foreach($children_terms as $child_term){
			$children[] = array(
									"#prefix" => "<div class='col-md-3'><div class='featured-content featured-box'><div class='box-content'>",
									"#suffix" => "</div></div></div>",
									'title' => array(
														'#theme' => 'link',
														'#text'  => $child_term->name,
														'#path'  => 'page/term/' . $child_term->tid,
														'#options'=> array('attributes' => array('title' => ''),'html'=>TRUE),
														'#prefix'=> "<h3>",
														'#suffix'=> "</h3>",
														),
									
									'description' => array(
														'#markup' => text_summary($child_term->description,null,300) . '...',
														),					
																			
									);	
			}
		$content['wrapper']['children'] = $children;
	}else{
		// Show additional entities associated with this term if any
		$content['wrapper'] = array("#prefix" => "<div class=''>");	
		$content['wrapper']['entities'] = entities_by_term($tid);		
	}	
	
	$content['wrapper']['#suffix'] = "</div>";
	
	// Set the breadcrumb
	// In the form  : Home > Statistical publications > Economy > Price and inflation
	$breadcrumb = array();
	$parent_terms = taxonomy_get_parents_all($tid);
	unset($parent_terms[0]); // Remove the first element including the term object
	   
   $breadcrumb[] = l(t('Home'),'<front>');
   //$breadcrumb[] = l(t('Statistical publications'),'statistical_publications');
   foreach(array_reverse($parent_terms) as $parent){
   	$breadcrumb[] = l(t($parent->name),drupal_get_path_alias('page/term/' . $parent->tid));
   } 
   
   //$breadcrumb[] = drupal_get_title();
   dpm($breadcrumb);
   drupal_set_breadcrumb($breadcrumb);	
		
	return $content;
	
}
/*
 * XML response from Prognoz WS parsing function
 * @param
 *		$response : the reponse in xml format
 *	@return
 *	String containing the html formatted data
 */
function _set_block_content($response){
	return 'Some indicators';
}

/*
 *
 */
function _profile_view(){
	global $user;
	
	$profile = profile2_load_by_user($user->uid,'main');	
	
	
	return profile2_view($profile);		
}

