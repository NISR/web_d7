<?php

/**
 * @file
 * Install, update and uninstall functions for the application module.
 */

/**
 * Implements hook_uninstall().
 */
function application_uninstall() {
  // Bypass entity_load() as we cannot use it here.
  $types = db_select('application_type', 'pt')
    ->fields('pt')
    ->execute()
    ->fetchAllAssoc('type');

  foreach ($types as $type => $info) {
    field_attach_delete_bundle('application', $type);
  }
  
  drupal_uninstall_schema('application');
}

/**
 * Implements hook_schema().
 */
function application_schema() {
  $schema = array();
  
  $schema['application'] = array(
    'description' => 'The base table for NISR applications.',
    'fields' => array(
      'aid' => array(
        'description' => 'The primary identifier for the NISR application.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type (bundle) of this NISR application.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the associated user.',
        'type' => 'int',
        'not null' => TRUE,
        
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the NISR application was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the NISR application was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('aid'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid')
      ),
      'type' => array(
        'table' => 'application_type',
        'columns' => array('type' => 'type')
      ),
    ),
  );
 
  if (module_exists('uuid')) {
    $uuid_field = uuid_schema_field_definition();
    $schema['application']['fields']['uuid'] = $uuid_field;
    $schema['application']['indexes']['uuid'] = array('uuid');
  }

  $schema['application_type'] = array(
    'description' => 'Stores information about all defined NISR application types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique NISR application type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
       'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this NISR application type in relation to others.',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this NISR application type.',
        'merge' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}
