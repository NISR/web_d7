<?php

/**
 * Implements hook_entity_info().
 */
function survey_entity_info() {
  $return = array(
    'survey' => array(
      'label' => t('Survey'),
      'entity class' => 'Survey',
      'controller class' => 'SurveyController',
      'base table' => 'survey',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'sid',
        'bundle' => 'type',
		  'uuid' => 'uuid',
      	),
      'bundle keys' => array(
        'bundle' => 'type',
      	),
      'bundles' => array(),
      'load hook' => 'survey_load',
      'uuid' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        	),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => FALSE,
        	),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'survey',
      'access callback' => 'survey_access',
    ),
  );
  $return['survey_type'] = array(
    'label' => t('Survey type'),
    'entity class' => 'SurveyType',
    'controller class' => 'SurveyTypeController',
    'base table' => 'survey_type',
    'fieldable' => FALSE,
    'bundle of' => 'survey',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'survey',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/survey-types',
      'file' => 'survey.admin.inc',
      'controller class' => 'SurveyTypeUIController',
    ),
    'access callback' => 'survey_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function survey_entity_info_alter(&$entity_info) {
  foreach (survey_types() as $type => $info) {
    $entity_info['survey']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/survey-types/manage/%survey_type',
        'real path' => 'admin/structure/survey-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function survey_menu() {
  $items = array();

  $items['survey/add'] = array(
    'title' => 'Add survey',
    'page callback' => 'survey_admin_add_page',
    'access arguments' => array('administer survey entities'),
    'file' => 'survey.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'survey',
    'tab_root' => 'survey',
  );

  $survey_uri = 'survey/%survey';
  $survey_uri_argument_position = 1;

  $items[$survey_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('survey', $survey_uri_argument_position),
    'page callback' => 'survey_view',
    'page arguments' => array($survey_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'survey', $survey_uri_argument_position),
    'file' => 'survey.pages.inc',
  );

  $items[$survey_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$survey_uri . '/delete'] = array(
    'title' => 'Delete survey',
    'title callback' => 'survey_label',
    'title arguments' => array($survey_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('survey_delete_form', $survey_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'survey', $survey_uri_argument_position),
    'file' => 'survey.admin.inc',
  );

  $items[$survey_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('survey_form', $survey_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'survey', $survey_uri_argument_position),
    'file' => 'survey.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (survey_types() as $type => $info) {
    $items['survey/add/' . $type] = array(
      'title' => 'Add survey',
      'page callback' => 'survey_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'survey', $type),
      'file' => 'survey.admin.inc',
    );
  }

  $items['admin/structure/survey-types/%survey_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('survey_type_form_delete_confirm', 4),
    'access arguments' => array('administer survey types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'survey.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function survey_permission() {
  $permissions = array(
    'administer survey types' => array(
      'title' => t('Administer survey types'),
      'description' => t('Allows users to configure survey types and their fields.'),
      'restrict access' => TRUE,
    ),
    'administer survey entities' => array(
      'title' => t('Administer survey entities'),
      'description' => t('Allows users to administer survey entities.'),
      'restrict access' => TRUE,
    ),
    'create survey entities' => array(
      'title' => t('Create surveys'),
      'description' => t('Allows users to create surveys.'),
      'restrict access' => FALSE,
    ),
    'view survey entities' => array(
      'title' => t('View surveys'),
      'description' => t('Allows users to view surveys.'),
      'restrict access' => FALSE,
    ),
    'edit any survey entities' => array(
      'title' => t('Edit any surveys'),
      'description' => t('Allows users to edit any surveys.'),
      'restrict access' => TRUE,
    ),
    'edit own survey entities' => array(
      'title' => t('Edit own surveys'),
      'description' => t('Allows users to edit own surveys.'),
      'restrict access' => FALSE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function survey_entity_property_info_alter(&$info) {
  $properties = &$info['survey']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the survey was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'create survey entities',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the survey."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer survey entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/*
 * Implements hook_field_extra_fields()
 */
function survey_field_extra_fields(){
	$extra = array();
	foreach (survey_types() as $type => $info) {
		$extra['survey'][$type] = array(
			'form' => array(
      		'title' => array(
        			'label' => t('Title'),
        			'description' => t('Survey module element'),
        			'weight' => -4,
      		),
      	 ),
		);
  	}
  	return $extra;
}

/*
 * Implements hook_entity_view().
 */

function survey_entity_view($entity, $type, $view_mode, $langcode){
  //unset($entity->content['author']);
}


/*
 * Implements hook_survey_insert()
 */
 
function survey_survey_insert(Survey $survey){
	if(!is_dir('public://resources/' . $survey->uuid)){;
		drupal_mkdir('public://resources/' . $survey->uuid);
	}
}

/**
 * Implements hook_theme_registry_alter().
 */
function survey_theme_registry_alter(&$theme_registry) {
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'survey');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}

/*******************************************************************************
 ********************************* survey API's **********************************
 ******************************************************************************/

/**
 * Access callback for survey.
 */
function survey_access($op, $survey = NULL, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
  	 case 'administrer':
      return user_access('administer survey entities', $account);
    case 'create':
      return user_access('administer survey entities', $account)
          || user_access('create survey entities', $account);
    case 'view':
      return user_access('administer survey entities', $account)
          || user_access('view survey entities', $account);
    case 'edit':
      return user_access('administer survey entities')
          || user_access('edit any survey entities')
          || (user_access('edit own survey entities') && ($survey->uid == $account->uid));
  }
}

/**
 * Load a survey.
 */
function survey_load($sid, $reset = FALSE) {
  $surveys = survey_load_multiple(array($sid), array(), $reset);
  return reset($surveys);
}

/**
 * Load multiple surveys based on certain conditions.
 */
function survey_load_multiple($sids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('survey', $sids, $conditions, $reset);
}

/**
 * Save survey.
 */
function survey_save($survey) {
  entity_save('survey', $survey);
}

/**
 * Delete single survey.
 */
function survey_delete($survey) {
  entity_delete('survey', entity_id('survey' ,$survey));
}

/**
 * Delete multiple surveys.
 */
function survey_delete_multiple($survey_ids) {
  entity_delete_multiple('survey', $survey_ids);
}

/*******************************************************************************
 ****************************** survey Type API's ********************************
 ******************************************************************************/

/**
 * Access callback for survey Type.
 */
function survey_type_access($op, $entity = NULL) {
  return user_access('administer survey types');
}

/**
 * Load survey Type.
 */
function survey_type_load($survey_type) {
  return survey_types($survey_type);
}

/**
 * List of survey Types.
 */
function survey_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('survey_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save survey type entity.
 */
function survey_type_save($survey_type) {
  entity_save('survey_type', $survey_type);
}

/**
 * Delete single case type.
 */
function survey_type_delete($survey_type) {
  entity_delete('survey_type', entity_id('survey_type' ,$survey_type));
}

/**
 * Delete multiple case types.
 */
function survey_type_delete_multiple($survey_type_ids) {
  entity_delete_multiple('survey_type', $survey_type_ids);
}

/**
  * Implements hook_views_api().
  */
function survey_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'survey'),
  );
}
