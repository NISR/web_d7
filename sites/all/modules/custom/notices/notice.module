<?php

/**
 * Implements hook_entity_info().
 */
function notice_entity_info() {
  $return = array(
    'notice' => array(
      'label' => t('Notice'),
      'entity class' => 'Notice',
      'controller class' => 'NoticeController',
      'base table' => 'notice',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'nid',
        'bundle' => 'type',
		  'uuid' => 'uuid',
      	),
      'bundle keys' => array(
        'bundle' => 'type',
      	),
      'bundles' => array(),
      'load hook' => 'notice_load',
      'uuid' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        	),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => FALSE,
        	),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'notice',
      'access callback' => 'notice_access',
    ),
  );
  $return['notice_type'] = array(
    'label' => t('Notice type'),
    'entity class' => 'NoticeType',
    'controller class' => 'NoticeTypeController',
    'base table' => 'notice_type',
    'fieldable' => FALSE,
    'bundle of' => 'notice',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'notice',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/notice-types',
      'file' => 'notice.admin.inc',
      'controller class' => 'NoticeTypeUIController',
    ),
    'access callback' => 'notice_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function notice_entity_info_alter(&$entity_info) {
  foreach (notice_types() as $type => $info) {
    $entity_info['notice']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/notice-types/manage/%notice_type',
        'real path' => 'admin/structure/notice-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function notice_menu() {
  $items = array();

  $items['notice/add'] = array(
    'title' => 'Add notice',
    'page callback' => 'notice_admin_add_page',
    'access arguments' => array('administer notice entities'),
    'file' => 'notice.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'notice',
    'tab_root' => 'notice',
  );

  $notice_uri = 'notice/%notice';
  $notice_uri_argument_position = 1;

  $items[$notice_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('notice', $notice_uri_argument_position),
    'page callback' => 'notice_view',
    'page arguments' => array($notice_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'notice', $notice_uri_argument_position),
    'file' => 'notice.pages.inc',
  );

  $items[$notice_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$notice_uri . '/delete'] = array(
    'title' => 'Delete notice',
    'title callback' => 'notice_label',
    'title arguments' => array($notice_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('notice_delete_form', $notice_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'notice', $notice_uri_argument_position),
    'file' => 'notice.admin.inc',
  );

  $items[$notice_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('notice_form', $notice_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'notice', $notice_uri_argument_position),
    'file' => 'notice.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (notice_types() as $type => $info) {
    $items['notice/add/' . $type] = array(
      'title' => 'Add notice',
      'page callback' => 'notice_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'notice', $type),
      'file' => 'notice.admin.inc',
    );
  }

  $items['admin/structure/notice-types/%notice_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('notice_type_form_delete_confirm', 4),
    'access arguments' => array('administer notice types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'notice.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function notice_permission() {
  $permissions = array(
    'administer notice types' => array(
      'title' => t('Administer notice types'),
      'description' => t('Allows users to configure notice types and their fields.'),
      'restrict access' => TRUE,
    ),
    'administer notice entities' => array(
      'title' => t('Administer notice entities'),
      'description' => t('Allows users to administer notice entities.'),
      'restrict access' => TRUE,
    ),
    'create notice entities' => array(
      'title' => t('Create notices'),
      'description' => t('Allows users to create notices.'),
      'restrict access' => FALSE,
    ),
    'view notice entities' => array(
      'title' => t('View notices'),
      'description' => t('Allows users to view notices.'),
      'restrict access' => FALSE,
    ),
    'edit any notice entities' => array(
      'title' => t('Edit any notices'),
      'description' => t('Allows users to edit any notices.'),
      'restrict access' => TRUE,
    ),
    'edit own notice entities' => array(
      'title' => t('Edit own notices'),
      'description' => t('Allows users to edit own notices.'),
      'restrict access' => FALSE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function notice_entity_property_info_alter(&$info) {
  $properties = &$info['notice']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the notice was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'create notice entities',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the notice."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer notice entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/*
 * Implements hook_field_extra_fields()
 */
function notice_field_extra_fields(){
	$extra = array();
	foreach (notice_types() as $type => $info) {
		$extra['notice'][$type] = array(
			'form' => array(
      		'title' => array(
        			'label' => t('Title'),
        			'description' => t('Notice module element'),
        			'weight' => -4,
      		),
      	 ),
		);
  	}
  	return $extra;
}

/*
 * Implements hook_entity_view().
 */

function notice_entity_view($entity, $type, $view_mode, $langcode){
  //unset($entity->content['author']);
}


/*
 * Implements hook_notice_insert()
 */
 
function notice_notice_insert(Notice $notice){
	if(!is_dir('public://resources/' . $notice->uuid)){;
		drupal_mkdir('public://resources/' . $notice->uuid);
	}
}


/*******************************************************************************
 ********************************* notice API's **********************************
 ******************************************************************************/

/**
 * Access callback for notice.
 */
function notice_access($op, $notice = NULL, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
  	 case 'administrer':
      return user_access('administer notice entities', $account);
    case 'create':
      return user_access('administer notice entities', $account)
          || user_access('create notice entities', $account);
    case 'view':
      return user_access('administer notice entities', $account)
          || user_access('view notice entities', $account);
    case 'edit':
      return user_access('administer notice entities')
          || user_access('edit any notice entities')
          || (user_access('edit own notice entities') && ($notice->uid == $account->uid));
  }
}

/**
 * Load a notice.
 */
function notice_load($nid, $reset = FALSE) {
  $notices = notice_load_multiple(array($nid), array(), $reset);
  return reset($notices);
}

/**
 * Load multiple notices based on certain conditions.
 */
function notice_load_multiple($nids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('notice', $nids, $conditions, $reset);
}

/**
 * Save notice.
 */
function notice_save($notice) {
  entity_save('notice', $notice);
}

/**
 * Delete single notice.
 */
function notice_delete($notice) {
  entity_delete('notice', entity_id('notice' ,$notice));
}

/**
 * Delete multiple notices.
 */
function notice_delete_multiple($notice_ids) {
  entity_delete_multiple('notice', $notice_ids);
}

/*******************************************************************************
 ****************************** notice Type API's ********************************
 ******************************************************************************/

/**
 * Access callback for notice Type.
 */
function notice_type_access($op, $entity = NULL) {
  return user_access('administer notice types');
}

/**
 * Load notice Type.
 */
function notice_type_load($notice_type) {
  return notice_types($notice_type);
}

/**
 * List of notice Types.
 */
function notice_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('notice_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save notice type entity.
 */
function notice_type_save($notice_type) {
  entity_save('notice_type', $notice_type);
}

/**
 * Delete single case type.
 */
function notice_type_delete($notice_type) {
  entity_delete('notice_type', entity_id('notice_type' ,$notice_type));
}

/**
 * Delete multiple case types.
 */
function notice_type_delete_multiple($notice_type_ids) {
  entity_delete_multiple('notice_type', $notice_type_ids);
}

/**
  * Implements hook_views_api().
  */
function notice_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'notice'),
  );
}
